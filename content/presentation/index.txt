---
title:      Introduction to the Adobe Flex 4.0 Framework
created_at: 2008-05-18 22:10:21.995012 -06:00
author:     Jed Schneider
company:    Red Bone Code Hounds
copyright:  Creative Commons
filter:
  - erb
  - textile
  - slides
layout: presentation
---

h1. Cola.rb 

h2. Flex and Rails

table(#logos).
|<img src="images/flex4.png"  width="260" height="260" alt="Flex4" class="logo">|<img src="images/rails.png" width="260" height="260" alt="Rails" class="logo">|

h1. About Me

h3. _"Hallo, ik bent Jed Schneider"_

* 1.5 years experience with the Flex Framework
* 1 year of experience using Rails and Ruby
* web development for two years, design, marketing and content management for 10 years. 

h1. Resources

<%= render :partial => 'resources' %>

h1. Overview

Two Main Topics:

* 4 slide intro to Flex
* survey of tools that bridge the divide
* example using RestfulX (one of the tools)

h1. Why Flex

Not a substitution for HTML and javascript, but to augment it.

A data visualization tool, An application like interface, tools for multimedia (video streaming, image manipulation), 3D rendering, interaction with built in mic and webcam, GIS (Geographic Information Systems) Server integration with ESRI products, stateless, defer/cache/process data on the client, consistent deployment, Desktop Runtime (AIR), shake hands with existing (aka, _legacy_) backend solutions, integrated testing Flex:Unit framework (in Flash Builder)

*Take home:* when use cases call for data visualizations, or legacy systems need a new look, Flex might be a good solution.

h1. What is Flex

* Flex is an opensource web application framework.
* Flex is a rapidly typed mark-up language to abstract and express _actionscript 3.0_
* MXML (macromedia XML) is the markup language with a syntax similar to XHTML
* it is used in conjunction with actionscript: Flex ads the bones, AS adds the 'action'

h1. Flex Code Example

A short snippet of code, for demonstration

<%= render :partial => 'button.mxml', :guard => true %>

and, thats pretty much it!

* click => can add inline actionscript inside braces
* added => can refer to a function elsewhere in the file or application
* styleName => can use CSS to markup components

h1. But, Flash Content is fixed in a SWF!

h3. Complaint: Flash content is not dynamic (in regards to content)

* Flex was created, in part, to provide easy access to dynamic content
* Out of the box:
** connect to ColdFusion, ASP.net, J2EE, PHP, application servers
** connect to HTTP API's and RESTful resources
** serialize data objects with AMF => RubyAMF, PHPAMF
** access databases directly; Flash Builder wizard creates CRUD tasks for you
* External libraries provide a range of other options, like consuming serialized JSON

h1. A familiar tool set

There are tools that are familiar to Rails developers

* "Cucumber":http://wiki.github.com/aslakhellesoy/cucumber/funfx-and-flex
* RestfulX (Peter Armstrong) "Flexible Rails":http://www.amazon.com/Flexible-Rails-Flex-Peter-Armstrong/dp/1933988509/ref=sr_1_2?ie=UTF8&s=books&qid=1254922044&sr=8-2
* RubyAMF (Tony Hillerson, EffectiveUI, now BrightKite) "Flex on Rails":http://www.amazon.com/Flex-Rails-Building-Internet-Applications/dp/0321543378/ref=sr_1_1?ie=UTF8&s=books&qid=1254921992&sr=8-1



h1. From Rails to Flex

* by hand (write the rails model, write the flex model, connect web service)
* serialize with RubyAMF
* use RestfulX (hooks for CouchDB, Merb, And Google App Engine Also)

h1. By Hand: The Swine Flu Tracker Application

Presented at the Columbia Adobe User Group in September, showing how to write a Flex interface by hand using the HTTPService class. 

"A longer introduction here":http://www.vimeo.com/groups/caug/videos/6806641
"flex code is here":http://www.github.com/jedschneider/caug_flex_app
"rails code is here":http://www.github.com/jedschneider/caug_rails_app

h1. Using RubyAMF

AMF is a serialization protocol created by Adobe.
"The Wikipedia Article":http://en.wikipedia.org/wiki/Action_Message_Format
"T. Hillerson's github":http://github.com/thillerson/rubyamf


h1. Resources

<%= render :partial => 'resources' %>

